# -*- coding: utf-8 -*-
"""Data_Extracting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H41oKzdtOMlNgxdbg-bwSjTe0DNODG-I
"""

import csv
from datetime import datetime
import requests
from bs4 import BeautifulSoup

def get_url(position, location):
    template = 'https://in.indeed.com/jobs?q={}&l={}'
    url = template.format(position, location)
    return url

url = get_url("executive assistant", "Delhi")

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
info_jobs = soup.find_all('div', 'job_seen_beacon')


def get_record(info_job):
    main_tags = info_job.h2.span
    job_title = main_tags.get('title')
    job_company_name = info_job.find('span', {'class': 'companyName'}).text
    job_location = info_job.find('div', {'class': 'companyLocation'}).text
    try:
        job_salary = info_job.find('span', {'class': 'salary-snippet'}).text.strip()
    except AttributeError:
        job_salary = "Salar Hidden"
    job_details = info_job.find('div', {'class': 'job-snippet'}).text.strip()
    job_date = info_job.find('span', {'class': 'date'}).text
    today_date = datetime.today().strftime('%d-%m-%y').strip()

    record = (job_title, job_company_name, job_location, job_salary, job_details, job_date, today_date)
    return record

records = []
for info_job in info_jobs:
    record = get_record(info_job)
    records.append(record)

print(records)

while True:
    try:
        url = 'https://in.indeed.com/' + soup.find('a', {'aria-label': 'Next'}).get('href')
    except AttributeError:
        break

    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    info_jobs = soup.find_all('div', 'job_seen_beacon')

    for info_job in info_jobs:
        record = get_record(info_job)
        records.append(record)
    print(len(records))


with open('excelsheet.csv', 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['job_title', 'job_company_name', 'job_location', 'job_salary', 'job_details', 'job_date', 'today_date'])
            writer.writerows(records)